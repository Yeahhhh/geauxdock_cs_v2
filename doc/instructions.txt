                  A LA-SiGMA Software Distribution
             GeauxDock: GPU Accelerated Molecular Docking
                          Version 20160328
              Copyright 2014 Louisiana State University

This package contains codes and sample data for running molecular
docking simulation on multi-core CPU, or NVIDIA GPU.

For the latest version and other resources visit
http://lasigma.loni.org/package/dock/

LA-SiGMA, the Louisiana Alliance for Simulation-Guided Materials
Applications, is a statewide interdisciplinary collaboration of
material and computer scientists developing computational resources
tuned for the latest generation of accelerator-equipped systems. The
Alliance also develops graduate curricula and is engaged in multiple
outreach activities. Visit us at http://lasigma.loni.org .

This work was supported in part by the National Science Foundation
under the NSF EPSCoR Cooperative Agreement No. EPS-1003897 with
additional support from the Louisiana Board of Regents.

=== Description
GeauxDock is an ultra-fast automated docking program, designed to predict
how small ligands bind to pharmacologically relevant macromolecules.

GeauxDock  employs a novel hybrid force field and a Monte Carlo protocol for
the efficient sampling of conformational space.

The GPU codes use features that are supported since Kepler-Generation Graphics
processing unit(GPU), and been tunned for Kepler GK110, Maxwell 2.0
and Pascal GPUs.

GeauxDock has applications in:
1. ligand virtual screening
2. structure-based drug design
3. drug repositioning and polypharmacology


=== Purpose
The purpose of molecular docking is to predict the preferred orientation of
small ligands within the binding sites of pharmacologically relevant
macromolecules as well as to reliably estimate the associated strength of
binding. GeauxDock simulates small molecule binding to proteins expanding the
repertoire of tools for computer-aided structure-based drug discovery.

=== Specifications
Compared to other ligand docking programs, GeauxDock offers several unique
features:

1. A mixed-resolution of protein-ligand complexes. Ligands are treated at the
atomic level, whereas proteins are coarse-grained representing individual
residues by sets of effective points: the backbone alpha carbon, the geometric
center of a peptide plate, and either one or two effective points representing
the side chain (depending on the size).

2. A high tolerance to target structure deformations. As a consequence of the
mixed-resolution, GeauxDock is fairly insensitive to distortions in protein
structures. Thus, experimental structures in their apo conformational states as
well as various quality protein models can be used as targets for small
molecule docking.

3. A combined evolution/physics-based force field. The energy function
implemented in GeauxDock integrates evolution- and physics-based components.
The relative contribution of these terms depends on the amount of evolutionary
information extracted from homologous complexes. In the absence of homologues,
weaker evolutionary-derived restraints are compensated by the stronger
contribution of physics-based energy terms.The capability of the force field to
reproduce experimental ligand binding poses and the corresponding binding
affinities was tested on the Astex/CCDC and BindingDB datasets of
pharmacologically relevant protein-ligand complexes.

4. Monte Carlo sampling scheme. GeauxDock uses the Replica Exchange Monte Carlo
algorithm to efficiently explore the conformational space of protein-ligand
interactions. This protocol was optimized to rapidly discover near-native
ligand configurations.

5. Computations on multi-core CPU.

6. Computations on Intel Xeon Phi Accelerator.

7. Computations on CUDA GPU.


=== Prerequisites

GeauxDock has been tested on the following OS:

  Red Hat Enterprise Linux Version 6.5
  Red Hat Enterprise Linux Server release 6.2
  Debian Linux 8

GeauxDock has been tested with the following packages:

  CUDA 6.5/7.0/7.5/8.0 and the NVIDIA binary GPU drivers (required by GPU build)
  intel compiler 15.0.0                                  (required by Xeon Phi build)
  gcc 4.4.6/4.9.2
  Python 3
  Bash                                                   (required for setting ENV)



=== Steps - Initial Setup and Simple Run

Follow these steps to setup and run the code the first time. The sample
commands are for a user with home directory "/home/smith/“ and who has unpacked
the GeauxDock distribution into a directory “geauxdock/“, so that the path to the
readme file would be “/home/smith/geauxdock/doc/instructions.txt".

 [ ]  Install Prerequisites
      Review the list of prerequisites, and install what is
      needed.


 [ ]  Build the Code
      Commands:

      $ source /home/smith/geauxdock/src/module/env/sourceme.bash
      $ cd /home/smith/geauxdock/src/ && make -B

      Building variables (eg: HOST, COMPLIER_HOST...) are speficied in "src/GNUmakefile.common.mk"
      Please modify in order to fit your environment.
      Meanwhile, geauxdock and the libray "module" should be built using the same compiler.
      Please make sure the compiler of choise is set identical across
      "src/GNUmakefile.common.mk" and "src/module/yeah/GNUmakefile".

      If the build is successful, a few executable named "3_geauxdock_*" will be created
      under "main" directory  If not, find an experienced programmer
      to help identify and fix the problems.


 [ ]  Run The Code
      The command below will run GeauxDock using the provided parameter files.

      $ cd /home/smith/geauxdock/src/main
      $ ./_workflow_validate_astex_1a07C1.sh 

      or

      $ export OMP_PROC_BIND=true
      $ export OMP_NUM_THREADS=20
      $ cd /home/smith/geauxdock/src/main
      $ ln -sf 3_geauxdock_cpu 3_geauxdock
      $ ./_workflow_validate_astex_1a07C1.sh

      or

      $ export OMP_PROC_BIND=true
      $ export OMP_NUM_THREADS=240
      $ export MIC_OMP_PROC_BIND=true
      $ cd /home/smith/geauxdock/src/main
      $ ln -sf 3_geauxdock_mic 3_geauxdock
      $ ./_workflow_validate_astex_1a07C1.sh

      or

      $ cd /home/smith/geauxdock/src/main
      $ ln -sf 3_geauxdock_gpu 3_geauxdock
      $ ./_workflow_validate_astex_1a07C1.sh


      The execution using the provided inputs and parameter files should complete
      in a few seconds.


  [ ]  Results Verification
       In case of a successful simulation using the example input files of
       "1a07C1.sdf" and "1a07C-1.pdb"
       initial energy state as part of standard output should agree with the
       lines below:

       0 0 0.6434 -0.0367 -0.2079 -0.1845 0.8521 -0.8880 0.0523 0.1744 -1.0000 0.7735 Ref Result
       0 0 0.6434 -0.0367 -0.2079 -0.1845 0.8521 -0.8880 0.0523 0.1744 -1.0000 0.7735







=== Documentation of Features

== Command-line options (OBSOLETE, swithched to CSV format input)

-lp protein_text_file
    a target protein
    default:   /home/smith/geauxdock/data/astex/proteins/prt.txt

-ll ligand_text_file
    a list of ligands to be docked
    default:   /home/smith/geauxdock/data/astex/ligands/ligs.txt

-s ff_file
    force field parameters to calculate ligand-target interaction

-opt opt_file
    optimized weights assigned to energy components

-na
    linear normalization parameter a

-nb
    linear normalization parameter b

-para
    energy calculation parameters

-ns <integer>
    total Monte Carlo steps, 3000 by default
    This iteration parameter should be multiple of STEPS_PER_DUMP
    (defined in src/size.h).

-nc <integer>
    Monte Carlo steps between two consecutive replica exchange, 5 by default
    This iteration parameter should divide STEPS_PER_DUMP
    (defined in src/size.h).

-floor_temp <float>
    floor temperature set for the replicas, 0.004 by default

-ceiling_temp <float>
    ceiling temperature set for the replicas, 0.036 by default

-nt <integer>
    temperature replica numbers, 1 by default

-t <float>
    transnational scale in each perturbation of the ligand, 0.02 (in Angstrom)
    by default

-r <float>
    rotational scale in each perturbation of the ligand, 0.08 (in Angstrom) by
    default



== The definitions of default command-line options (OBSOLETE)

The default arguments are specified in source code "src/frontend/util.C":
void ParseArguments (int argc, char **argv, ...)
{
    // ...
    std::string basedir ("../data/");
    inputfiles->lig_list = basedir + "astex/ligands/ligs.txt";
    inputfiles->prt_list = basedir + "astex/proteins/prt.txt";
    inputfiles->weight_file.path = basedir + "parameters/08ff_opt";
    inputfiles->enepara_file.path = basedir + "parameters/paras";
    inputfiles->norpara_file.path_a = basedir + "parameters/08_nor_a";
    inputfiles->norpara_file.path_b = basedir + "parameters/08_nor_b";
    exchgpara->floor_temp = 0.044f;
    exchgpara->ceiling_temp = 0.036f;
    exchgpara->num_temp = 1;
    ts = 0.02f;
    rs = 0.08f;
    // ...
}



== Input file formats
1. sdf
   ligand input file (http://en.wikipedia.org/wiki/Chemical_table_file#SDF)

2. pdb
   protein input file (http://www.rcsb.org/pdb/home/home.do)

3. ff
   force field parameters that can be generated using utils/prepare_ff and
   files generated by eFindSite (http://brylinski.cct.lsu.edu/efindsite)











== Output format
screen output, including
   * info on input and output data paths
   * simulation parameter setup
   * runtime performance measurements


=== Development History

== Discussion of the code origin
GeauxDock was designed to use computer-generated protein models as targets for
small molecule docking in structure-based drug discovery. The current
high-performance implementation is based on a serial C++ version written by
Michal Brylinski at Louisiana State University.


== Changes in each release.
Fourth release.

